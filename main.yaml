AWSTemplateFormatVersion: '2010-09-09'
Description: Full Infrastructure for Text Summarizer AI Project

Parameters:
  LambdaS3Bucket:
    Type: String
    Description: S3 bucket where Lambda code zip files are stored

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: TextSummarizerVPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: {}

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs '']

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref RouteTable

  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/text-summarizer-log"
      RetentionInDays: 7

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0c02fb55956c7d316
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: TextSummarizerEC2
      SecurityGroupIds:
        - !GetAtt EC2SecurityGroup.GroupId

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  TextUploadBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub text-upload-bucket-${AWS::AccountId}-${AWS::StackName}

  SummaryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub TextSummaries-${AWS::StackName}
      AttributeDefinitions:
        - AttributeName: FileName
          AttributeType: S
      KeySchema:
        - AttributeName: FileName
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: lambda-text-summary-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      Policies:
        - PolicyName: lambda-access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - comprehend:DetectSentiment
                  - comprehend:DetectKeyPhrases
                  - comprehend:DetectEntities
                  - comprehend:DetectSyntax
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource: !Sub "${TextUploadBucket.Arn}/*"
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !GetAtt SummaryTable.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  UploadHandlerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: UploadHandler
      Handler: upload_handler.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref LambdaS3Bucket
        S3Key: upload_handler.zip
      Environment:
        Variables:
          BUCKET_NAME: !Ref TextUploadBucket

  SummarizerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: Summarizer
      Handler: summarizer.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref LambdaS3Bucket
        S3Key: summarizer.zip
      Environment:
        Variables:
          BUCKET_NAME: !Ref TextUploadBucket

  SaveToDynamoFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: SaveToDynamo
      Handler: save_to_dynamo.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref LambdaS3Bucket
        S3Key: save_to_dynamo.zip
      Environment:
        Variables:
          BUCKET_NAME: !Ref TextUploadBucket

  StepFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: step-function-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: '*'

  SummarizationStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt StepFunctionRole.Arn
      StateMachineName: TextSummarizationFlow
      DefinitionString: !Sub |
        {
          "StartAt": "Summarizer",
          "States": {
            "Summarizer": {
              "Type": "Task",
              "Resource": "${SummarizerFunction.Arn}",
              "Next": "SaveToDynamo"
            },
            "SaveToDynamo": {
              "Type": "Task",
              "Resource": "${SaveToDynamoFunction.Arn}",
              "End": true
            }
          }
        }

  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: TextSummarizerAPI

  UploadResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: upload

  UploadMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref UploadResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - LambdaArn: !GetAtt UploadHandlerFunction.Arn

  UploadOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref UploadResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  PermissionForAPIGateway:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref UploadHandlerFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/Prod/POST/upload

  GetSummaryFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GetSummary
      Handler: summarizer.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref LambdaS3Bucket
        S3Key: summarizer.zip
      Environment:
        Variables:
          BUCKET_NAME: !Ref TextUploadBucket
          TABLE_NAME: !Ref SummaryTable

  SummaryResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: summary

  SummaryOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref SummaryResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  SummaryPostMethodV2:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref SummaryResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - LambdaArn: !GetAtt GetSummaryFunction.Arn
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  PermissionForAPIGatewayGetSummary:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetSummaryFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/Prod/POST/summary

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - UploadMethod
      - UploadOptionsMethod
      - SummaryOptionsMethod
      - SummaryPostMethodV2
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: Prod
      Description: !Sub "CORS redeploy ${AWS::StackName}-${AWS::Region}-${AWS::AccountId}"
